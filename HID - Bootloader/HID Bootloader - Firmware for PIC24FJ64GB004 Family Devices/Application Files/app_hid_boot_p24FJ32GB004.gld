/*
** Linker script for PIC24FJ32GB004
*/

OUTPUT_ARCH("24FJ32GB004")
CRT0_STARTUP(crt0_standard.o)
CRT1_STARTUP(crt1_standard.o)

OPTIONAL(-lpPIC24Fxxx)

/*
** Memory Regions
*/
MEMORY
{
  data  (a!xr)   : ORIGIN = 0x800,         LENGTH = 0x1FFF
  reset          : ORIGIN = 0x0,           LENGTH = 0x4
  ivt            : ORIGIN = 0x4,           LENGTH = 0xFC
  aivt           : ORIGIN = 0x104,         LENGTH = 0xFC
  app_ivt        : ORIGIN = 0x1400,        LENGTH = 0xC0
  program (xr)   : ORIGIN = 0x14C0,         LENGTH = 0x4338
  CONFIG4        : ORIGIN = 0x57F8,        LENGTH = 0x2
  CONFIG3        : ORIGIN = 0x57FA,        LENGTH = 0x2
  CONFIG2        : ORIGIN = 0x57FC,        LENGTH = 0x2
  CONFIG1        : ORIGIN = 0x57FE,        LENGTH = 0x2
}

__CONFIG4 = 0x57F8;
__CONFIG3 = 0x57FA;
__CONFIG2 = 0x57FC;
__CONFIG1 = 0x57FE;

__NO_HANDLES = 1;          /* Suppress handles on this device  */

__IVT_BASE  = 0x4;
__AIVT_BASE = 0x104;
__DATA_BASE = 0x800;
__CODE_BASE = 0x200;
__APP_IVT_BASE = 0x1400;


/*
** ==================== Section Map ======================
*/
SECTIONS
{
  /*
  ** ========== Program Memory ==========
  */


  /*
  ** Reset Instruction
  */
  .reset :
  {
        SHORT(ABSOLUTE(__reset));
        SHORT(0x04);
        SHORT((ABSOLUTE(__reset) >> 16) & 0x7F);
        SHORT(0);
  } >reset

  .application_ivt __APP_IVT_BASE : 
  {
    SHORT(ABSOLUTE(__reset)); SHORT(0x04); SHORT((ABSOLUTE(__reset) >> 16) & 0x7F); SHORT(0);
    SHORT(DEFINED(__DefaultInterrupt) ? ABSOLUTE(__DefaultInterrupt) : ABSOLUTE(__DefaultInterrupt));  SHORT(0x04);  SHORT(DEFINED(__DefaultInterrupt) ? (ABSOLUTE(__DefaultInterrupt) >> 16) & 0x7F : (ABSOLUTE(__DefaultInterrupt) >> 16) & 0x7F);  SHORT(0);
    SHORT(DEFINED(__OscillatorFail) ? ABSOLUTE(__OscillatorFail) : ABSOLUTE(__DefaultInterrupt));  SHORT(0x04);  SHORT(DEFINED(__OscillatorFail) ? (ABSOLUTE(__OscillatorFail) >> 16) & 0x7F : (ABSOLUTE(__DefaultInterrupt) >> 16) & 0x7F);  SHORT(0);
    SHORT(DEFINED(__AddressError) ? ABSOLUTE(__AddressError) : ABSOLUTE(__DefaultInterrupt));  SHORT(0x04);  SHORT(DEFINED(__AddressError) ? (ABSOLUTE(__AddressError) >> 16) & 0x7F : (ABSOLUTE(__DefaultInterrupt) >> 16) & 0x7F);  SHORT(0);
    SHORT(DEFINED(__StackError) ? ABSOLUTE(__StackError) : ABSOLUTE(__DefaultInterrupt));  SHORT(0x04);  SHORT(DEFINED(__StackError) ? (ABSOLUTE(__StackError) >> 16) & 0x7F : (ABSOLUTE(__DefaultInterrupt) >> 16) & 0x7F);  SHORT(0);
    SHORT(DEFINED(__MathError) ? ABSOLUTE(__MathError) : ABSOLUTE(__DefaultInterrupt));  SHORT(0x04);  SHORT(DEFINED(__MathError) ? (ABSOLUTE(__MathError) >> 16) & 0x7F : (ABSOLUTE(__DefaultInterrupt) >> 16) & 0x7F);  SHORT(0);
    SHORT(DEFINED(__INT0Interrupt) ? ABSOLUTE(__INT0Interrupt) : ABSOLUTE(__DefaultInterrupt));  SHORT(0x04);  SHORT(DEFINED(__INT0Interrupt) ? (ABSOLUTE(__INT0Interrupt) >> 16) & 0x7F : (ABSOLUTE(__DefaultInterrupt) >> 16) & 0x7F);  SHORT(0);
    SHORT(DEFINED(__IC1Interrupt) ? ABSOLUTE(__IC1Interrupt) : ABSOLUTE(__DefaultInterrupt));  SHORT(0x04);  SHORT(DEFINED(__IC1Interrupt) ? (ABSOLUTE(__IC1Interrupt) >> 16) & 0x7F : (ABSOLUTE(__DefaultInterrupt) >> 16) & 0x7F);  SHORT(0);
    SHORT(DEFINED(__OC1Interrupt) ? ABSOLUTE(__OC1Interrupt) : ABSOLUTE(__DefaultInterrupt));  SHORT(0x04);  SHORT(DEFINED(__OC1Interrupt) ? (ABSOLUTE(__OC1Interrupt) >> 16) & 0x7F : (ABSOLUTE(__DefaultInterrupt) >> 16) & 0x7F);  SHORT(0);
    SHORT(DEFINED(__T1Interrupt) ? ABSOLUTE(__T1Interrupt) : ABSOLUTE(__DefaultInterrupt));  SHORT(0x04);  SHORT(DEFINED(__T1Interrupt) ? (ABSOLUTE(__T1Interrupt) >> 16) & 0x7F : (ABSOLUTE(__DefaultInterrupt) >> 16) & 0x7F);  SHORT(0);
    SHORT(DEFINED(__IC2Interrupt) ? ABSOLUTE(__IC2Interrupt) : ABSOLUTE(__DefaultInterrupt));  SHORT(0x04);  SHORT(DEFINED(__IC2Interrupt) ? (ABSOLUTE(__IC2Interrupt) >> 16) & 0x7F : (ABSOLUTE(__DefaultInterrupt) >> 16) & 0x7F);  SHORT(0);
    SHORT(DEFINED(__OC2Interrupt) ? ABSOLUTE(__OC2Interrupt) : ABSOLUTE(__DefaultInterrupt));  SHORT(0x04);  SHORT(DEFINED(__OC2Interrupt) ? (ABSOLUTE(__OC2Interrupt) >> 16) & 0x7F : (ABSOLUTE(__DefaultInterrupt) >> 16) & 0x7F);  SHORT(0);
    SHORT(DEFINED(__T2Interrupt) ? ABSOLUTE(__T2Interrupt) : ABSOLUTE(__DefaultInterrupt));  SHORT(0x04);  SHORT(DEFINED(__T2Interrupt) ? (ABSOLUTE(__T2Interrupt) >> 16) & 0x7F : (ABSOLUTE(__DefaultInterrupt) >> 16) & 0x7F);  SHORT(0);
    SHORT(DEFINED(__T3Interrupt) ? ABSOLUTE(__T3Interrupt) : ABSOLUTE(__DefaultInterrupt));  SHORT(0x04);  SHORT(DEFINED(__T3Interrupt) ? (ABSOLUTE(__T3Interrupt) >> 16) & 0x7F : (ABSOLUTE(__DefaultInterrupt) >> 16) & 0x7F);  SHORT(0);
    SHORT(DEFINED(__SPI1ErrInterrupt) ? ABSOLUTE(__SPI1ErrInterrupt) : ABSOLUTE(__DefaultInterrupt));  SHORT(0x04);  SHORT(DEFINED(__SPI1ErrInterrupt) ? (ABSOLUTE(__SPI1ErrInterrupt) >> 16) & 0x7F : (ABSOLUTE(__DefaultInterrupt) >> 16) & 0x7F);  SHORT(0);
    SHORT(DEFINED(__SPI1Interrupt) ? ABSOLUTE(__SPI1Interrupt) : ABSOLUTE(__DefaultInterrupt));  SHORT(0x04);  SHORT(DEFINED(__SPI1Interrupt) ? (ABSOLUTE(__SPI1Interrupt) >> 16) & 0x7F : (ABSOLUTE(__DefaultInterrupt) >> 16) & 0x7F);  SHORT(0);
    SHORT(DEFINED(__U1RXInterrupt) ? ABSOLUTE(__U1RXInterrupt) : ABSOLUTE(__DefaultInterrupt));  SHORT(0x04);  SHORT(DEFINED(__U1RXInterrupt) ? (ABSOLUTE(__U1RXInterrupt) >> 16) & 0x7F : (ABSOLUTE(__DefaultInterrupt) >> 16) & 0x7F);  SHORT(0);
    SHORT(DEFINED(__U1TXInterrupt) ? ABSOLUTE(__U1TXInterrupt) : ABSOLUTE(__DefaultInterrupt));  SHORT(0x04);  SHORT(DEFINED(__U1TXInterrupt) ? (ABSOLUTE(__U1TXInterrupt) >> 16) & 0x7F : (ABSOLUTE(__DefaultInterrupt) >> 16) & 0x7F);  SHORT(0);
    SHORT(DEFINED(__ADC1Interrupt) ? ABSOLUTE(__ADC1Interrupt) : ABSOLUTE(__DefaultInterrupt));  SHORT(0x04);  SHORT(DEFINED(__ADC1Interrupt) ? (ABSOLUTE(__ADC1Interrupt) >> 16) & 0x7F : (ABSOLUTE(__DefaultInterrupt) >> 16) & 0x7F);  SHORT(0);
    SHORT(DEFINED(__SI2C1Interrupt) ? ABSOLUTE(__SI2C1Interrupt) : ABSOLUTE(__DefaultInterrupt));  SHORT(0x04);  SHORT(DEFINED(__SI2C1Interrupt) ? (ABSOLUTE(__SI2C1Interrupt) >> 16) & 0x7F : (ABSOLUTE(__DefaultInterrupt) >> 16) & 0x7F);  SHORT(0);
    SHORT(DEFINED(__MI2C1Interrupt) ? ABSOLUTE(__MI2C1Interrupt) : ABSOLUTE(__DefaultInterrupt));  SHORT(0x04);  SHORT(DEFINED(__MI2C1Interrupt) ? (ABSOLUTE(__MI2C1Interrupt) >> 16) & 0x7F : (ABSOLUTE(__DefaultInterrupt) >> 16) & 0x7F);  SHORT(0);
    SHORT(DEFINED(__CompInterrupt) ? ABSOLUTE(__CompInterrupt) : ABSOLUTE(__DefaultInterrupt));  SHORT(0x04);  SHORT(DEFINED(__CompInterrupt) ? (ABSOLUTE(__CompInterrupt) >> 16) & 0x7F : (ABSOLUTE(__DefaultInterrupt) >> 16) & 0x7F);  SHORT(0);
    SHORT(DEFINED(__CNInterrupt) ? ABSOLUTE(__CNInterrupt) : ABSOLUTE(__DefaultInterrupt));  SHORT(0x04);  SHORT(DEFINED(__CNInterrupt) ? (ABSOLUTE(__CNInterrupt) >> 16) & 0x7F : (ABSOLUTE(__DefaultInterrupt) >> 16) & 0x7F);  SHORT(0);
    SHORT(DEFINED(__INT1Interrupt) ? ABSOLUTE(__INT1Interrupt) : ABSOLUTE(__DefaultInterrupt));  SHORT(0x04);  SHORT(DEFINED(__INT1Interrupt) ? (ABSOLUTE(__INT1Interrupt) >> 16) & 0x7F : (ABSOLUTE(__DefaultInterrupt) >> 16) & 0x7F);  SHORT(0);
    SHORT(DEFINED(__OC3Interrupt) ? ABSOLUTE(__OC3Interrupt) : ABSOLUTE(__DefaultInterrupt));  SHORT(0x04);  SHORT(DEFINED(__OC3Interrupt) ? (ABSOLUTE(__OC3Interrupt) >> 16) & 0x7F : (ABSOLUTE(__DefaultInterrupt) >> 16) & 0x7F);  SHORT(0);
    SHORT(DEFINED(__OC4Interrupt) ? ABSOLUTE(__OC4Interrupt) : ABSOLUTE(__DefaultInterrupt));  SHORT(0x04);  SHORT(DEFINED(__OC4Interrupt) ? (ABSOLUTE(__OC4Interrupt) >> 16) & 0x7F : (ABSOLUTE(__DefaultInterrupt) >> 16) & 0x7F);  SHORT(0);
    SHORT(DEFINED(__T4Interrupt) ? ABSOLUTE(__T4Interrupt) : ABSOLUTE(__DefaultInterrupt));  SHORT(0x04);  SHORT(DEFINED(__T4Interrupt) ? (ABSOLUTE(__T4Interrupt) >> 16) & 0x7F : (ABSOLUTE(__DefaultInterrupt) >> 16) & 0x7F);  SHORT(0);
    SHORT(DEFINED(__T5Interrupt) ? ABSOLUTE(__T5Interrupt) : ABSOLUTE(__DefaultInterrupt));  SHORT(0x04);  SHORT(DEFINED(__T5Interrupt) ? (ABSOLUTE(__T5Interrupt) >> 16) & 0x7F : (ABSOLUTE(__DefaultInterrupt) >> 16) & 0x7F);  SHORT(0);
    SHORT(DEFINED(__INT2Interrupt) ? ABSOLUTE(__INT2Interrupt) : ABSOLUTE(__DefaultInterrupt));  SHORT(0x04);  SHORT(DEFINED(__INT2Interrupt) ? (ABSOLUTE(__INT2Interrupt) >> 16) & 0x7F : (ABSOLUTE(__DefaultInterrupt) >> 16) & 0x7F);  SHORT(0);
    SHORT(DEFINED(__U2RXInterrupt) ? ABSOLUTE(__U2RXInterrupt) : ABSOLUTE(__DefaultInterrupt));  SHORT(0x04);  SHORT(DEFINED(__U2RXInterrupt) ? (ABSOLUTE(__U2RXInterrupt) >> 16) & 0x7F : (ABSOLUTE(__DefaultInterrupt) >> 16) & 0x7F);  SHORT(0);
    SHORT(DEFINED(__U2TXInterrupt) ? ABSOLUTE(__U2TXInterrupt) : ABSOLUTE(__DefaultInterrupt));  SHORT(0x04);  SHORT(DEFINED(__U2TXInterrupt) ? (ABSOLUTE(__U2TXInterrupt) >> 16) & 0x7F : (ABSOLUTE(__DefaultInterrupt) >> 16) & 0x7F);  SHORT(0);
    SHORT(DEFINED(__SPI2ErrInterrupt) ? ABSOLUTE(__SPI2ErrInterrupt) : ABSOLUTE(__DefaultInterrupt));  SHORT(0x04);  SHORT(DEFINED(__SPI2ErrInterrupt) ? (ABSOLUTE(__SPI2ErrInterrupt) >> 16) & 0x7F : (ABSOLUTE(__DefaultInterrupt) >> 16) & 0x7F);  SHORT(0);
    SHORT(DEFINED(__SPI2Interrupt) ? ABSOLUTE(__SPI2Interrupt) : ABSOLUTE(__DefaultInterrupt));  SHORT(0x04);  SHORT(DEFINED(__SPI2Interrupt) ? (ABSOLUTE(__SPI2Interrupt) >> 16) & 0x7F : (ABSOLUTE(__DefaultInterrupt) >> 16) & 0x7F);  SHORT(0);
    SHORT(DEFINED(__IC3Interrupt) ? ABSOLUTE(__IC3Interrupt) : ABSOLUTE(__DefaultInterrupt));  SHORT(0x04);  SHORT(DEFINED(__IC3Interrupt) ? (ABSOLUTE(__IC3Interrupt) >> 16) & 0x7F : (ABSOLUTE(__DefaultInterrupt) >> 16) & 0x7F);  SHORT(0);
    SHORT(DEFINED(__IC4Interrupt) ? ABSOLUTE(__IC4Interrupt) : ABSOLUTE(__DefaultInterrupt));  SHORT(0x04);  SHORT(DEFINED(__IC4Interrupt) ? (ABSOLUTE(__IC4Interrupt) >> 16) & 0x7F : (ABSOLUTE(__DefaultInterrupt) >> 16) & 0x7F);  SHORT(0);
    SHORT(DEFINED(__IC5Interrupt) ? ABSOLUTE(__IC5Interrupt) : ABSOLUTE(__DefaultInterrupt));  SHORT(0x04);  SHORT(DEFINED(__IC5Interrupt) ? (ABSOLUTE(__IC5Interrupt) >> 16) & 0x7F : (ABSOLUTE(__DefaultInterrupt) >> 16) & 0x7F);  SHORT(0);
    SHORT(DEFINED(__OC5Interrupt) ? ABSOLUTE(__OC5Interrupt) : ABSOLUTE(__DefaultInterrupt));  SHORT(0x04);  SHORT(DEFINED(__OC5Interrupt) ? (ABSOLUTE(__OC5Interrupt) >> 16) & 0x7F : (ABSOLUTE(__DefaultInterrupt) >> 16) & 0x7F);  SHORT(0);
    SHORT(DEFINED(__PMPInterrupt) ? ABSOLUTE(__PMPInterrupt) : ABSOLUTE(__DefaultInterrupt));  SHORT(0x04);  SHORT(DEFINED(__PMPInterrupt) ? (ABSOLUTE(__PMPInterrupt) >> 16) & 0x7F : (ABSOLUTE(__DefaultInterrupt) >> 16) & 0x7F);  SHORT(0);
    SHORT(DEFINED(__SI2C2Interrupt) ? ABSOLUTE(__SI2C2Interrupt) : ABSOLUTE(__DefaultInterrupt));  SHORT(0x04);  SHORT(DEFINED(__SI2C2Interrupt) ? (ABSOLUTE(__SI2C2Interrupt) >> 16) & 0x7F : (ABSOLUTE(__DefaultInterrupt) >> 16) & 0x7F);  SHORT(0);
    SHORT(DEFINED(__MI2C2Interrupt) ? ABSOLUTE(__MI2C2Interrupt) : ABSOLUTE(__DefaultInterrupt));  SHORT(0x04);  SHORT(DEFINED(__MI2C2Interrupt) ? (ABSOLUTE(__MI2C2Interrupt) >> 16) & 0x7F : (ABSOLUTE(__DefaultInterrupt) >> 16) & 0x7F);  SHORT(0);
    SHORT(DEFINED(__RTCCInterrupt) ? ABSOLUTE(__RTCCInterrupt) : ABSOLUTE(__DefaultInterrupt));  SHORT(0x04);  SHORT(DEFINED(__RTCCInterrupt) ? (ABSOLUTE(__RTCCInterrupt) >> 16) & 0x7F : (ABSOLUTE(__DefaultInterrupt) >> 16) & 0x7F);  SHORT(0);
    SHORT(DEFINED(__U1ErrInterrupt) ? ABSOLUTE(__U1ErrInterrupt) : ABSOLUTE(__DefaultInterrupt));  SHORT(0x04);  SHORT(DEFINED(__U1ErrInterrupt) ? (ABSOLUTE(__U1ErrInterrupt) >> 16) & 0x7F : (ABSOLUTE(__DefaultInterrupt) >> 16) & 0x7F);  SHORT(0);
    SHORT(DEFINED(__U2ErrInterrupt) ? ABSOLUTE(__U2ErrInterrupt) : ABSOLUTE(__DefaultInterrupt));  SHORT(0x04);  SHORT(DEFINED(__U2ErrInterrupt) ? (ABSOLUTE(__U2ErrInterrupt) >> 16) & 0x7F : (ABSOLUTE(__DefaultInterrupt) >> 16) & 0x7F);  SHORT(0);
    SHORT(DEFINED(__CRCInterrupt) ? ABSOLUTE(__CRCInterrupt) : ABSOLUTE(__DefaultInterrupt));  SHORT(0x04);  SHORT(DEFINED(__CRCInterrupt) ? (ABSOLUTE(__CRCInterrupt) >> 16) & 0x7F : (ABSOLUTE(__DefaultInterrupt) >> 16) & 0x7F);  SHORT(0);
    SHORT(DEFINED(__LVDInterrupt) ? ABSOLUTE(__LVDInterrupt) : ABSOLUTE(__DefaultInterrupt));  SHORT(0x04);  SHORT(DEFINED(__LVDInterrupt) ? (ABSOLUTE(__LVDInterrupt) >> 16) & 0x7F : (ABSOLUTE(__DefaultInterrupt) >> 16) & 0x7F);  SHORT(0);
    SHORT(DEFINED(__CTMUInterrupt) ? ABSOLUTE(__CTMUInterrupt) : ABSOLUTE(__DefaultInterrupt));  SHORT(0x04);  SHORT(DEFINED(__CTMUInterrupt) ? (ABSOLUTE(__CTMUInterrupt) >> 16) & 0x7F : (ABSOLUTE(__DefaultInterrupt) >> 16) & 0x7F);  SHORT(0);
    SHORT(DEFINED(__USB1Interrupt) ? ABSOLUTE(__USB1Interrupt) : ABSOLUTE(__DefaultInterrupt));  SHORT(0x04);  SHORT(DEFINED(__USB1Interrupt) ? (ABSOLUTE(__USB1Interrupt) >> 16) & 0x7F : (ABSOLUTE(__DefaultInterrupt) >> 16) & 0x7F);  SHORT(0);
    __DEFAULT_VECTOR = .;
    SHORT(ABSOLUTE(__DefaultInterrupt)); SHORT(0x04); SHORT((ABSOLUTE(__DefaultInterrupt) >> 16) & 0x7F); SHORT(0);
  }


  /*
  ** Interrupt Vector Tables
  **
  ** The primary and alternate tables are loaded
  ** here, between sections .reset and .text.
  ** Vector table source code appears below.
  */


  /*
  ** User Code and Library Code
  **
  ** This section must not be assigned to __CODE_BASE,
  ** because CodeGuard(tm) sections may be located there.
  **
  ** Note that input sections *(.text) are not mapped here.
  ** The best-fit allocator locates them, so that .text
  ** may flow around PSV sections as needed.
  */
  .text :
  {
        *(.init);
        *(.user_init);
        *(.handle);
        *(.libc) *(.libm) *(.libdsp);  /* keep together in this order */
        *(.lib*);
  } >program


  /*
  ** User-Defined Section in Program Memory
  **
  ** note: can specify an address using
  **       the following syntax:
  **
  **       usercode 0x1234 :
  **         {
  **           *(usercode);
  **         } >program
  */
  usercode :
  {
        *(usercode);
  } >program


  /*
  ** User-Defined Constants in Program Memory
  **
  ** For PSV type sections, the Load Memory Address (LMA)
  ** should be specified as follows:
  **
  **       userconst : AT(0x1234)
  **         {
  **           *(userconst);
  **         } >program
  **
  ** Note that mapping PSV sections in linker scripts
  ** is not generally recommended.
  **
  ** Because of page alignment restrictions, memory is
  ** often used more efficiently when PSV sections
  ** do not appear in the linker script.
  **
  ** For more information on memory allocation,
  ** please refer to chapter 10, 'Linker Processing'
  ** in the Assembler, Linker manual (DS51317).
  */


  /*
  ** Configuration Words
  */
  __CONFIG4 :
  { *(__CONFIG4.sec)    } >CONFIG4
  __CONFIG3 :
  { *(__CONFIG3.sec)    } >CONFIG3
  __CONFIG2 :
  { *(__CONFIG2.sec)    } >CONFIG2
  __CONFIG1 :
  { *(__CONFIG1.sec)    } >CONFIG1


  /*
  ** =========== Data Memory ===========
  */


  /*
  ** ICD Debug Exec
  **
  ** This section provides optional storage for
  ** the ICD2 debugger. Define a global symbol
  ** named __ICD2RAM to enable ICD2. This section
  ** must be loaded at data address 0x800.
  */
  .icd __DATA_BASE (NOLOAD):
  {
    . += (DEFINED (__ICD2RAM) ? 0x50 : 0 );
  } > data


  /*
  ** Other sections in data memory are not explicitly mapped.
  ** Instead they are allocated according to their section
  ** attributes, which is most efficient.
  ** 
  ** If a specific arrangement of sections is required
  ** (other than what can be achieved using attributes)
  ** additional sections may be defined here. See chapter
  ** 10.5 in the MPLAB ASM30/LINK30 User's Guide (DS51317)
  ** for more information.
  */


  /*
  ** ========== Debug Info ==============
  */

  .comment        0 : { *(.comment) }

  /*
  ** DWARF-2
  */
  .debug_info     0 : { *(.debug_info) *(.gnu.linkonce.wi.*) }
  .debug_abbrev   0 : { *(.debug_abbrev) }
  .debug_line     0 : { *(.debug_line) }
  .debug_frame    0 : { *(.debug_frame) }
  .debug_str      0 : { *(.debug_str) }
  .debug_loc      0 : { *(.debug_loc) }
  .debug_macinfo  0 : { *(.debug_macinfo) }
  .debug_pubnames 0 : { *(.debug_pubnames) }
  .debug_ranges   0 : { *(.debug_ranges) }
  .debug_aranges  0 : { *(.debug_aranges) }

} /* SECTIONS */

/*
** ================= End of Section Map ================
*/

/*
** Section Map for Interrupt Vector Tables
*/
SECTIONS
{

/*
** Interrupt Vector Table
*/
.ivt __IVT_BASE :
  {
    LONG( ABSOLUTE(__APP_IVT_BASE) + 0x0004); /* __ReservedTrap0 */
    LONG( ABSOLUTE(__APP_IVT_BASE) + 0x0008); /* __OscillatorFail */
    LONG( ABSOLUTE(__APP_IVT_BASE) + 0x000C); /* __AddressError */
    LONG( ABSOLUTE(__APP_IVT_BASE) + 0x0010); /* __StackError */
    LONG( ABSOLUTE(__APP_IVT_BASE) + 0x0014); /* __MathError */
    LONG( ABSOLUTE(__DEFAULT_VECTOR)); /* __ReservedTrap5 */
    LONG( ABSOLUTE(__DEFAULT_VECTOR)); /* __ReservedTrap6 */
    LONG( ABSOLUTE(__DEFAULT_VECTOR)); /* __ReservedTrap7 */
    LONG( ABSOLUTE(__APP_IVT_BASE) + 0x0018); /* __INT0Interrupt */
    LONG( ABSOLUTE(__APP_IVT_BASE) + 0x001C); /* __IC1Interrupt */
    LONG( ABSOLUTE(__APP_IVT_BASE) + 0x0020); /* __OC1Interrupt */
    LONG( ABSOLUTE(__APP_IVT_BASE) + 0x0024); /* __T1Interrupt */
    LONG( ABSOLUTE(__DEFAULT_VECTOR)); /* __Interrupt4 */
    LONG( ABSOLUTE(__APP_IVT_BASE) + 0x0028); /* __IC2Interrupt */
    LONG( ABSOLUTE(__APP_IVT_BASE) + 0x002C); /* __OC2Interrupt */
    LONG( ABSOLUTE(__APP_IVT_BASE) + 0x0030); /* __T2Interrupt */
    LONG( ABSOLUTE(__APP_IVT_BASE) + 0x0034); /* __T3Interrupt */
    LONG( ABSOLUTE(__APP_IVT_BASE) + 0x0038); /* __SPI1ErrInterrupt */
    LONG( ABSOLUTE(__APP_IVT_BASE) + 0x003C); /* __SPI1Interrupt */
    LONG( ABSOLUTE(__APP_IVT_BASE) + 0x0040); /* __U1RXInterrupt */
    LONG( ABSOLUTE(__APP_IVT_BASE) + 0x0044); /* __U1TXInterrupt */
    LONG( ABSOLUTE(__APP_IVT_BASE) + 0x0048); /* __ADC1Interrupt */
    LONG( ABSOLUTE(__DEFAULT_VECTOR)); /* __Interrupt14 */
    LONG( ABSOLUTE(__DEFAULT_VECTOR)); /* __Interrupt15 */
    LONG( ABSOLUTE(__APP_IVT_BASE) + 0x004C); /* __SI2C1Interrupt */
    LONG( ABSOLUTE(__APP_IVT_BASE) + 0x0050); /* __MI2C1Interrupt */
    LONG( ABSOLUTE(__APP_IVT_BASE) + 0x0054); /* __CompInterrupt */
    LONG( ABSOLUTE(__APP_IVT_BASE) + 0x0058); /* __CNInterrupt */
    LONG( ABSOLUTE(__APP_IVT_BASE) + 0x005C); /* __INT1Interrupt */
    LONG( ABSOLUTE(__DEFAULT_VECTOR)); /* __Interrupt21 */
    LONG( ABSOLUTE(__DEFAULT_VECTOR)); /* __Interrupt22 */
    LONG( ABSOLUTE(__DEFAULT_VECTOR)); /* __Interrupt23 */
    LONG( ABSOLUTE(__DEFAULT_VECTOR)); /* __Interrupt24 */
    LONG( ABSOLUTE(__APP_IVT_BASE) + 0x0060); /* __OC3Interrupt */
    LONG( ABSOLUTE(__APP_IVT_BASE) + 0x0064); /* __OC4Interrupt */
    LONG( ABSOLUTE(__APP_IVT_BASE) + 0x0068); /* __T4Interrupt */
    LONG( ABSOLUTE(__APP_IVT_BASE) + 0x006C); /* __T5Interrupt */
    LONG( ABSOLUTE(__APP_IVT_BASE) + 0x0070); /* __INT2Interrupt */
    LONG( ABSOLUTE(__APP_IVT_BASE) + 0x0074); /* __U2RXInterrupt */
    LONG( ABSOLUTE(__APP_IVT_BASE) + 0x0078); /* __U2TXInterrupt */
    LONG( ABSOLUTE(__APP_IVT_BASE) + 0x007C); /* __SPI2ErrInterrupt */
    LONG( ABSOLUTE(__APP_IVT_BASE) + 0x0080); /* __SPI2Interrupt */
    LONG( ABSOLUTE(__DEFAULT_VECTOR)); /* __Interrupt34 */
    LONG( ABSOLUTE(__DEFAULT_VECTOR)); /* __Interrupt35 */
    LONG( ABSOLUTE(__DEFAULT_VECTOR)); /* __Interrupt36 */
    LONG( ABSOLUTE(__APP_IVT_BASE) + 0x0084); /* __IC3Interrupt */
    LONG( ABSOLUTE(__APP_IVT_BASE) + 0x0088); /* __IC4Interrupt */
    LONG( ABSOLUTE(__APP_IVT_BASE) + 0x008C); /* __IC5Interrupt */
    LONG( ABSOLUTE(__DEFAULT_VECTOR)); /* __Interrupt40 */
    LONG( ABSOLUTE(__APP_IVT_BASE) + 0x0090); /* __OC5Interrupt */
    LONG( ABSOLUTE(__DEFAULT_VECTOR)); /* __Interrupt42 */
    LONG( ABSOLUTE(__DEFAULT_VECTOR)); /* __Interrupt43 */
    LONG( ABSOLUTE(__DEFAULT_VECTOR)); /* __Interrupt44 */
    LONG( ABSOLUTE(__APP_IVT_BASE) + 0x0094); /* __PMPInterrupt */
    LONG( ABSOLUTE(__DEFAULT_VECTOR)); /* __Interrupt46 */
    LONG( ABSOLUTE(__DEFAULT_VECTOR)); /* __Interrupt47 */
    LONG( ABSOLUTE(__DEFAULT_VECTOR)); /* __Interrupt48 */
    LONG( ABSOLUTE(__APP_IVT_BASE) + 0x0098); /* __SI2C2Interrupt */
    LONG( ABSOLUTE(__APP_IVT_BASE) + 0x009C); /* __MI2C2Interrupt */
    LONG( ABSOLUTE(__DEFAULT_VECTOR)); /* __Interrupt51 */
    LONG( ABSOLUTE(__DEFAULT_VECTOR)); /* __Interrupt52 */
    LONG( ABSOLUTE(__DEFAULT_VECTOR)); /* __Interrupt53 */
    LONG( ABSOLUTE(__DEFAULT_VECTOR)); /* __Interrupt54 */
    LONG( ABSOLUTE(__DEFAULT_VECTOR)); /* __Interrupt55 */
    LONG( ABSOLUTE(__DEFAULT_VECTOR)); /* __Interrupt56 */
    LONG( ABSOLUTE(__DEFAULT_VECTOR)); /* __Interrupt57 */
    LONG( ABSOLUTE(__DEFAULT_VECTOR)); /* __Interrupt58 */
    LONG( ABSOLUTE(__DEFAULT_VECTOR)); /* __Interrupt59 */
    LONG( ABSOLUTE(__DEFAULT_VECTOR)); /* __Interrupt60 */
    LONG( ABSOLUTE(__DEFAULT_VECTOR)); /* __Interrupt61 */
    LONG( ABSOLUTE(__APP_IVT_BASE) + 0x00A0); /* __RTCCInterrupt */
    LONG( ABSOLUTE(__DEFAULT_VECTOR)); /* __Interrupt63 */
    LONG( ABSOLUTE(__DEFAULT_VECTOR)); /* __Interrupt64 */
    LONG( ABSOLUTE(__APP_IVT_BASE) + 0x00A4); /* __U1ErrInterrupt */
    LONG( ABSOLUTE(__APP_IVT_BASE) + 0x00A8); /* __U2ErrInterrupt */
    LONG( ABSOLUTE(__APP_IVT_BASE) + 0x00AC); /* __CRCInterrupt */
    LONG( ABSOLUTE(__DEFAULT_VECTOR)); /* __Interrupt68 */
    LONG( ABSOLUTE(__DEFAULT_VECTOR)); /* __Interrupt69 */
    LONG( ABSOLUTE(__DEFAULT_VECTOR)); /* __Interrupt70 */
    LONG( ABSOLUTE(__DEFAULT_VECTOR)); /* __Interrupt71 */
    LONG( ABSOLUTE(__APP_IVT_BASE) + 0x00B0); /* __LVDInterrupt */
    LONG( ABSOLUTE(__DEFAULT_VECTOR)); /* __Interrupt73 */
    LONG( ABSOLUTE(__DEFAULT_VECTOR)); /* __Interrupt74 */
    LONG( ABSOLUTE(__DEFAULT_VECTOR)); /* __Interrupt75 */
    LONG( ABSOLUTE(__DEFAULT_VECTOR)); /* __Interrupt76 */
    LONG( ABSOLUTE(__APP_IVT_BASE) + 0x00B4); /* __CTMUInterrupt*/
    LONG( ABSOLUTE(__DEFAULT_VECTOR)); /* __Interrupt78 */
    LONG( ABSOLUTE(__DEFAULT_VECTOR)); /* __Interrupt79 */
    LONG( ABSOLUTE(__DEFAULT_VECTOR)); /* __Interrupt80 */
    LONG( ABSOLUTE(__DEFAULT_VECTOR)); /* __Interrupt81 */
    LONG( ABSOLUTE(__DEFAULT_VECTOR)); /* __Interrupt82 */
    LONG( ABSOLUTE(__DEFAULT_VECTOR)); /* __Interrupt83 */
    LONG( ABSOLUTE(__DEFAULT_VECTOR)); /* __Interrupt84 */
    LONG( ABSOLUTE(__DEFAULT_VECTOR)); /* __Interrupt85 */
    LONG( ABSOLUTE(__APP_IVT_BASE) + 0x00B8); /* __USB1Interrupt*/
    LONG( ABSOLUTE(__DEFAULT_VECTOR)); /* __Interrupt87 */
    LONG( ABSOLUTE(__DEFAULT_VECTOR)); /* __Interrupt88 */
    LONG( ABSOLUTE(__DEFAULT_VECTOR)); /* __Interrupt89 */
    LONG( ABSOLUTE(__DEFAULT_VECTOR)); /* __Interrupt90 */
    LONG( ABSOLUTE(__DEFAULT_VECTOR)); /* __Interrupt91 */
    LONG( ABSOLUTE(__DEFAULT_VECTOR)); /* __Interrupt92 */
    LONG( ABSOLUTE(__DEFAULT_VECTOR)); /* __Interrupt93 */
    LONG( ABSOLUTE(__DEFAULT_VECTOR)); /* __Interrupt94 */
    LONG( ABSOLUTE(__DEFAULT_VECTOR)); /* __Interrupt95 */
    LONG( ABSOLUTE(__DEFAULT_VECTOR)); /* __Interrupt96 */
    LONG( ABSOLUTE(__DEFAULT_VECTOR)); /* __Interrupt97 */
    LONG( ABSOLUTE(__DEFAULT_VECTOR)); /* __Interrupt98 */
    LONG( ABSOLUTE(__DEFAULT_VECTOR)); /* __Interrupt99 */
    LONG( ABSOLUTE(__DEFAULT_VECTOR)); /* __Interrupt100 */
    LONG( ABSOLUTE(__DEFAULT_VECTOR)); /* __Interrupt101 */
    LONG( ABSOLUTE(__DEFAULT_VECTOR)); /* __Interrupt102 */
    LONG( ABSOLUTE(__DEFAULT_VECTOR)); /* __Interrupt103 */
    LONG( ABSOLUTE(__DEFAULT_VECTOR)); /* __Interrupt104 */
    LONG( ABSOLUTE(__DEFAULT_VECTOR)); /* __Interrupt105 */
    LONG( ABSOLUTE(__DEFAULT_VECTOR)); /* __Interrupt106 */
    LONG( ABSOLUTE(__DEFAULT_VECTOR)); /* __Interrupt107 */
    LONG( ABSOLUTE(__DEFAULT_VECTOR)); /* __Interrupt108 */
    LONG( ABSOLUTE(__DEFAULT_VECTOR)); /* __Interrupt109 */
    LONG( ABSOLUTE(__DEFAULT_VECTOR)); /* __Interrupt110 */
    LONG( ABSOLUTE(__DEFAULT_VECTOR)); /* __Interrupt111 */
    LONG( ABSOLUTE(__DEFAULT_VECTOR)); /* __Interrupt112 */
    LONG( ABSOLUTE(__DEFAULT_VECTOR)); /* __Interrupt113 */
    LONG( ABSOLUTE(__DEFAULT_VECTOR)); /* __Interrupt114 */
    LONG( ABSOLUTE(__DEFAULT_VECTOR)); /* __Interrupt115 */
    LONG( ABSOLUTE(__DEFAULT_VECTOR)); /* __Interrupt116 */
    LONG( ABSOLUTE(__DEFAULT_VECTOR)); /* __Interrupt117 */
  } >ivt


/*
** Alternate Interrupt Vector Table
*/
.aivt __AIVT_BASE :
  {
  } >aivt
} /* SECTIONS */


/*
** ============== Equates for SFR Addresses =============
*/

 WREG0        = 0x0;
_WREG0        = 0x0;
 WREG1        = 0x2;
_WREG1        = 0x2;
 WREG2        = 0x4;
_WREG2        = 0x4;
 WREG3        = 0x6;
_WREG3        = 0x6;
 WREG4        = 0x8;
_WREG4        = 0x8;
 WREG5        = 0xA;
_WREG5        = 0xA;
 WREG6        = 0xC;
_WREG6        = 0xC;
 WREG7        = 0xE;
_WREG7        = 0xE;
 WREG8        = 0x10;
_WREG8        = 0x10;
 WREG9        = 0x12;
_WREG9        = 0x12;
 WREG10       = 0x14;
_WREG10       = 0x14;
 WREG11       = 0x16;
_WREG11       = 0x16;
 WREG12       = 0x18;
_WREG12       = 0x18;
 WREG13       = 0x1A;
_WREG13       = 0x1A;
 WREG14       = 0x1C;
_WREG14       = 0x1C;
 WREG15       = 0x1E;
_WREG15       = 0x1E;
 SPLIM        = 0x20;
_SPLIM        = 0x20;
 PCL          = 0x2E;
_PCL          = 0x2E;
 PCH          = 0x30;
_PCH          = 0x30;
 TBLPAG       = 0x32;
_TBLPAG       = 0x32;
 PSVPAG       = 0x34;
_PSVPAG       = 0x34;
 RCOUNT       = 0x36;
_RCOUNT       = 0x36;
 SR           = 0x42;
_SR           = 0x42;
_SRbits       = 0x42;
 CORCON       = 0x44;
_CORCON       = 0x44;
_CORCONbits   = 0x44;
 DISICNT      = 0x52;
_DISICNT      = 0x52;
 CNEN1        = 0x60;
_CNEN1        = 0x60;
_CNEN1bits    = 0x60;
 CNEN2        = 0x62;
_CNEN2        = 0x62;
_CNEN2bits    = 0x62;
 CNPU1        = 0x68;
_CNPU1        = 0x68;
_CNPU1bits    = 0x68;
 CNPU2        = 0x6A;
_CNPU2        = 0x6A;
_CNPU2bits    = 0x6A;
 INTCON1      = 0x80;
_INTCON1      = 0x80;
_INTCON1bits  = 0x80;
 INTCON2      = 0x82;
_INTCON2      = 0x82;
_INTCON2bits  = 0x82;
 IFS0         = 0x84;
_IFS0         = 0x84;
_IFS0bits     = 0x84;
 IFS1         = 0x86;
_IFS1         = 0x86;
_IFS1bits     = 0x86;
 IFS2         = 0x88;
_IFS2         = 0x88;
_IFS2bits     = 0x88;
 IFS3         = 0x8A;
_IFS3         = 0x8A;
_IFS3bits     = 0x8A;
 IFS4         = 0x8C;
_IFS4         = 0x8C;
_IFS4bits     = 0x8C;
 IFS5         = 0x8E;
_IFS5         = 0x8E;
_IFS5bits     = 0x8E;
 IEC0         = 0x94;
_IEC0         = 0x94;
_IEC0bits     = 0x94;
 IEC1         = 0x96;
_IEC1         = 0x96;
_IEC1bits     = 0x96;
 IEC2         = 0x98;
_IEC2         = 0x98;
_IEC2bits     = 0x98;
 IEC3         = 0x9A;
_IEC3         = 0x9A;
_IEC3bits     = 0x9A;
 IEC4         = 0x9C;
_IEC4         = 0x9C;
_IEC4bits     = 0x9C;
 IEC5         = 0x9E;
_IEC5         = 0x9E;
_IEC5bits     = 0x9E;
 IPC0         = 0xA4;
_IPC0         = 0xA4;
_IPC0bits     = 0xA4;
 IPC1         = 0xA6;
_IPC1         = 0xA6;
_IPC1bits     = 0xA6;
 IPC2         = 0xA8;
_IPC2         = 0xA8;
_IPC2bits     = 0xA8;
 IPC3         = 0xAA;
_IPC3         = 0xAA;
_IPC3bits     = 0xAA;
 IPC4         = 0xAC;
_IPC4         = 0xAC;
_IPC4bits     = 0xAC;
 IPC5         = 0xAE;
_IPC5         = 0xAE;
_IPC5bits     = 0xAE;
 IPC6         = 0xB0;
_IPC6         = 0xB0;
_IPC6bits     = 0xB0;
 IPC7         = 0xB2;
_IPC7         = 0xB2;
_IPC7bits     = 0xB2;
 IPC8         = 0xB4;
_IPC8         = 0xB4;
_IPC8bits     = 0xB4;
 IPC9         = 0xB6;
_IPC9         = 0xB6;
_IPC9bits     = 0xB6;
 IPC10        = 0xB8;
_IPC10        = 0xB8;
_IPC10bits    = 0xB8;
 IPC11        = 0xBA;
_IPC11        = 0xBA;
_IPC11bits    = 0xBA;
 IPC12        = 0xBC;
_IPC12        = 0xBC;
_IPC12bits    = 0xBC;
 IPC15        = 0xC2;
_IPC15        = 0xC2;
_IPC15bits    = 0xC2;
 IPC16        = 0xC4;
_IPC16        = 0xC4;
_IPC16bits    = 0xC4;
 IPC18        = 0xC8;
_IPC18        = 0xC8;
_IPC18bits    = 0xC8;
 IPC19        = 0xCA;
_IPC19        = 0xCA;
_IPC19bits    = 0xCA;
 IPC21        = 0xCE;
_IPC21        = 0xCE;
_IPC21bits    = 0xCE;
 INTTREG      = 0xE0;
_INTTREG      = 0xE0;
_INTTREGbits  = 0xE0;
 TMR1         = 0x100;
_TMR1         = 0x100;
 PR1          = 0x102;
_PR1          = 0x102;
 T1CON        = 0x104;
_T1CON        = 0x104;
_T1CONbits    = 0x104;
 TMR2         = 0x106;
_TMR2         = 0x106;
 TMR3HLD      = 0x108;
_TMR3HLD      = 0x108;
 TMR3         = 0x10A;
_TMR3         = 0x10A;
 PR2          = 0x10C;
_PR2          = 0x10C;
 PR3          = 0x10E;
_PR3          = 0x10E;
 T2CON        = 0x110;
_T2CON        = 0x110;
_T2CONbits    = 0x110;
 T3CON        = 0x112;
_T3CON        = 0x112;
_T3CONbits    = 0x112;
 TMR4         = 0x114;
_TMR4         = 0x114;
 TMR5HLD      = 0x116;
_TMR5HLD      = 0x116;
 TMR5         = 0x118;
_TMR5         = 0x118;
 PR4          = 0x11A;
_PR4          = 0x11A;
 PR5          = 0x11C;
_PR5          = 0x11C;
 T4CON        = 0x11E;
_T4CON        = 0x11E;
_T4CONbits    = 0x11E;
 T5CON        = 0x120;
_T5CON        = 0x120;
_T5CONbits    = 0x120;
 IC1CON1      = 0x140;
_IC1CON1      = 0x140;
_IC1CON1bits  = 0x140;
 IC1CON2      = 0x142;
_IC1CON2      = 0x142;
_IC1CON2bits  = 0x142;
 IC1BUF       = 0x144;
_IC1BUF       = 0x144;
 IC1TMR       = 0x146;
_IC1TMR       = 0x146;
 IC2CON1      = 0x148;
_IC2CON1      = 0x148;
_IC2CON1bits  = 0x148;
 IC2CON2      = 0x14A;
_IC2CON2      = 0x14A;
_IC2CON2bits  = 0x14A;
 IC2BUF       = 0x14C;
_IC2BUF       = 0x14C;
 IC2TMR       = 0x14E;
_IC2TMR       = 0x14E;
 IC3CON1      = 0x150;
_IC3CON1      = 0x150;
_IC3CON1bits  = 0x150;
 IC3CON2      = 0x152;
_IC3CON2      = 0x152;
_IC3CON2bits  = 0x152;
 IC3BUF       = 0x154;
_IC3BUF       = 0x154;
 IC3TMR       = 0x156;
_IC3TMR       = 0x156;
 IC4CON1      = 0x158;
_IC4CON1      = 0x158;
_IC4CON1bits  = 0x158;
 IC4CON2      = 0x15A;
_IC4CON2      = 0x15A;
_IC4CON2bits  = 0x15A;
 IC4BUF       = 0x15C;
_IC4BUF       = 0x15C;
 IC4TMR       = 0x15E;
_IC4TMR       = 0x15E;
 IC5CON1      = 0x160;
_IC5CON1      = 0x160;
_IC5CON1bits  = 0x160;
 IC5CON2      = 0x162;
_IC5CON2      = 0x162;
_IC5CON2bits  = 0x162;
 IC5BUF       = 0x164;
_IC5BUF       = 0x164;
 IC5TMR       = 0x166;
_IC5TMR       = 0x166;
 OC1CON1      = 0x190;
_OC1CON1      = 0x190;
_OC1CON1bits  = 0x190;
 OC1CON2      = 0x192;
_OC1CON2      = 0x192;
_OC1CON2bits  = 0x192;
 OC1RS        = 0x194;
_OC1RS        = 0x194;
 OC1R         = 0x196;
_OC1R         = 0x196;
 OC1TMR       = 0x198;
_OC1TMR       = 0x198;
 OC2CON1      = 0x19A;
_OC2CON1      = 0x19A;
_OC2CON1bits  = 0x19A;
 OC2CON2      = 0x19C;
_OC2CON2      = 0x19C;
_OC2CON2bits  = 0x19C;
 OC2RS        = 0x19E;
_OC2RS        = 0x19E;
 OC2R         = 0x1A0;
_OC2R         = 0x1A0;
 OC2TMR       = 0x1A2;
_OC2TMR       = 0x1A2;
 OC3CON1      = 0x1A4;
_OC3CON1      = 0x1A4;
_OC3CON1bits  = 0x1A4;
 OC3CON2      = 0x1A6;
_OC3CON2      = 0x1A6;
_OC3CON2bits  = 0x1A6;
 OC3RS        = 0x1A8;
_OC3RS        = 0x1A8;
 OC3R         = 0x1AA;
_OC3R         = 0x1AA;
 OC3TMR       = 0x1AC;
_OC3TMR       = 0x1AC;
 OC4CON1      = 0x1AE;
_OC4CON1      = 0x1AE;
_OC4CON1bits  = 0x1AE;
 OC4CON2      = 0x1B0;
_OC4CON2      = 0x1B0;
_OC4CON2bits  = 0x1B0;
 OC4RS        = 0x1B2;
_OC4RS        = 0x1B2;
 OC4R         = 0x1B4;
_OC4R         = 0x1B4;
 OC4TMR       = 0x1B6;
_OC4TMR       = 0x1B6;
 OC5CON1      = 0x1B8;
_OC5CON1      = 0x1B8;
_OC5CON1bits  = 0x1B8;
 OC5CON2      = 0x1BA;
_OC5CON2      = 0x1BA;
_OC5CON2bits  = 0x1BA;
 OC5RS        = 0x1BC;
_OC5RS        = 0x1BC;
 OC5R         = 0x1BE;
_OC5R         = 0x1BE;
 OC5TMR       = 0x1C0;
_OC5TMR       = 0x1C0;
 I2C1RCV      = 0x200;
_I2C1RCV      = 0x200;
 I2C1TRN      = 0x202;
_I2C1TRN      = 0x202;
 I2C1BRG      = 0x204;
_I2C1BRG      = 0x204;
 I2C1CON      = 0x206;
_I2C1CON      = 0x206;
_I2C1CONbits  = 0x206;
 I2C1STAT     = 0x208;
_I2C1STAT     = 0x208;
_I2C1STATbits = 0x208;
 I2C1ADD      = 0x20A;
_I2C1ADD      = 0x20A;
 I2C1MSK      = 0x20C;
_I2C1MSK      = 0x20C;
 I2C2RCV      = 0x210;
_I2C2RCV      = 0x210;
 I2C2TRN      = 0x212;
_I2C2TRN      = 0x212;
 I2C2BRG      = 0x214;
_I2C2BRG      = 0x214;
 I2C2CON      = 0x216;
_I2C2CON      = 0x216;
_I2C2CONbits  = 0x216;
 I2C2STAT     = 0x218;
_I2C2STAT     = 0x218;
_I2C2STATbits = 0x218;
 I2C2ADD      = 0x21A;
_I2C2ADD      = 0x21A;
 I2C2MSK      = 0x21C;
_I2C2MSK      = 0x21C;
 U1MODE       = 0x220;
_U1MODE       = 0x220;
_U1MODEbits   = 0x220;
 U1STA        = 0x222;
_U1STA        = 0x222;
_U1STAbits    = 0x222;
 U1TXREG      = 0x224;
_U1TXREG      = 0x224;
_U1TXREGbits  = 0x224;
 U1RXREG      = 0x226;
_U1RXREG      = 0x226;
_U1RXREGbits  = 0x226;
 U1BRG        = 0x228;
_U1BRG        = 0x228;
 U2MODE       = 0x230;
_U2MODE       = 0x230;
_U2MODEbits   = 0x230;
 U2STA        = 0x232;
_U2STA        = 0x232;
_U2STAbits    = 0x232;
 U2TXREG      = 0x234;
_U2TXREG      = 0x234;
_U2TXREGbits  = 0x234;
 U2RXREG      = 0x236;
_U2RXREG      = 0x236;
_U2RXREGbits  = 0x236;
 U2BRG        = 0x238;
_U2BRG        = 0x238;
 SPI1STAT     = 0x240;
_SPI1STAT     = 0x240;
_SPI1STATbits = 0x240;
 SPI1CON1     = 0x242;
_SPI1CON1     = 0x242;
_SPI1CON1bits = 0x242;
 SPI1CON2     = 0x244;
_SPI1CON2     = 0x244;
_SPI1CON2bits = 0x244;
 SPI1BUF      = 0x248;
_SPI1BUF      = 0x248;
 SPI2STAT     = 0x260;
_SPI2STAT     = 0x260;
_SPI2STATbits = 0x260;
 SPI2CON1     = 0x262;
_SPI2CON1     = 0x262;
_SPI2CON1bits = 0x262;
 SPI2CON2     = 0x264;
_SPI2CON2     = 0x264;
_SPI2CON2bits = 0x264;
 SPI2BUF      = 0x268;
_SPI2BUF      = 0x268;
 TRISA        = 0x2C0;
_TRISA        = 0x2C0;
_TRISAbits    = 0x2C0;
 PORTA        = 0x2C2;
_PORTA        = 0x2C2;
_PORTAbits    = 0x2C2;
 LATA         = 0x2C4;
_LATA         = 0x2C4;
_LATAbits     = 0x2C4;
 ODCA         = 0x2C6;
_ODCA         = 0x2C6;
_ODCAbits     = 0x2C6;
 TRISB        = 0x2C8;
_TRISB        = 0x2C8;
_TRISBbits    = 0x2C8;
 PORTB        = 0x2CA;
_PORTB        = 0x2CA;
_PORTBbits    = 0x2CA;
 LATB         = 0x2CC;
_LATB         = 0x2CC;
_LATBbits     = 0x2CC;
 ODCB         = 0x2CE;
_ODCB         = 0x2CE;
_ODCBbits     = 0x2CE;
 TRISC        = 0x2D0;
_TRISC        = 0x2D0;
_TRISCbits    = 0x2D0;
 PORTC        = 0x2D2;
_PORTC        = 0x2D2;
_PORTCbits    = 0x2D2;
 LATC         = 0x2D4;
_LATC         = 0x2D4;
_LATCbits     = 0x2D4;
 ODCC         = 0x2D6;
_ODCC         = 0x2D6;
_ODCCbits     = 0x2D6;
 PADCFG1      = 0x2FC;
_PADCFG1      = 0x2FC;
_PADCFG1bits  = 0x2FC;
 ADC1BUF0     = 0x300;
_ADC1BUF0     = 0x300;
 ADC1BUF1     = 0x302;
_ADC1BUF1     = 0x302;
 ADC1BUF2     = 0x304;
_ADC1BUF2     = 0x304;
 ADC1BUF3     = 0x306;
_ADC1BUF3     = 0x306;
 ADC1BUF4     = 0x308;
_ADC1BUF4     = 0x308;
 ADC1BUF5     = 0x30A;
_ADC1BUF5     = 0x30A;
 ADC1BUF6     = 0x30C;
_ADC1BUF6     = 0x30C;
 ADC1BUF7     = 0x30E;
_ADC1BUF7     = 0x30E;
 ADC1BUF8     = 0x310;
_ADC1BUF8     = 0x310;
 ADC1BUF9     = 0x312;
_ADC1BUF9     = 0x312;
 ADC1BUFA     = 0x314;
_ADC1BUFA     = 0x314;
 ADC1BUFB     = 0x316;
_ADC1BUFB     = 0x316;
 ADC1BUFC     = 0x318;
_ADC1BUFC     = 0x318;
 ADC1BUFD     = 0x31A;
_ADC1BUFD     = 0x31A;
 ADC1BUFE     = 0x31C;
_ADC1BUFE     = 0x31C;
 ADC1BUFF     = 0x31E;
_ADC1BUFF     = 0x31E;
 AD1CON1      = 0x320;
_AD1CON1      = 0x320;
_AD1CON1bits  = 0x320;
 AD1CON2      = 0x322;
_AD1CON2      = 0x322;
_AD1CON2bits  = 0x322;
 AD1CON3      = 0x324;
_AD1CON3      = 0x324;
_AD1CON3bits  = 0x324;
 AD1CHS       = 0x328;
_AD1CHS       = 0x328;
_AD1CHSbits   = 0x328;
 AD1CHS0      = 0x328;
_AD1CHS0      = 0x328;
_AD1CHS0bits  = 0x328;
 AD1PCFG      = 0x32C;
_AD1PCFG      = 0x32C;
_AD1PCFGbits  = 0x32C;
 AD1PCFGL     = 0x32C;
_AD1PCFGL     = 0x32C;
_AD1PCFGLbits = 0x32C;
 AD1CSSL      = 0x330;
_AD1CSSL      = 0x330;
_AD1CSSLbits  = 0x330;
 CTMUCON      = 0x33C;
_CTMUCON      = 0x33C;
_CTMUCONbits  = 0x33C;
 CTMUICON     = 0x33E;
_CTMUICON     = 0x33E;
_CTMUICONbits = 0x33E;
 U1OTGIR      = 0x480;
_U1OTGIR      = 0x480;
_U1OTGIRbits  = 0x480;
 U1OTGIE      = 0x482;
_U1OTGIE      = 0x482;
_U1OTGIEbits  = 0x482;
 U1OTGSTAT    = 0x484;
_U1OTGSTAT    = 0x484;
_U1OTGSTATbits = 0x484;
 U1OTGCON     = 0x486;
_U1OTGCON     = 0x486;
_U1OTGCONbits = 0x486;
 U1PWRC       = 0x488;
_U1PWRC       = 0x488;
_U1PWRCbits   = 0x488;
 U1IR         = 0x48A;
_U1IR         = 0x48A;
_U1IRbits     = 0x48A;
 U1IE         = 0x48C;
_U1IE         = 0x48C;
_U1IEbits     = 0x48C;
 U1EIR        = 0x48E;
_U1EIR        = 0x48E;
_U1EIRbits    = 0x48E;
 U1EIE        = 0x490;
_U1EIE        = 0x490;
_U1EIEbits    = 0x490;
 U1STAT       = 0x492;
_U1STAT       = 0x492;
_U1STATbits   = 0x492;
 U1CON        = 0x494;
_U1CON        = 0x494;
_U1CONbits    = 0x494;
 U1ADDR       = 0x496;
_U1ADDR       = 0x496;
_U1ADDRbits   = 0x496;
 U1BDTP1      = 0x498;
_U1BDTP1      = 0x498;
_U1BDTP1bits  = 0x498;
 U1FRML       = 0x49A;
_U1FRML       = 0x49A;
_U1FRMLbits   = 0x49A;
 U1FRMH       = 0x49C;
_U1FRMH       = 0x49C;
_U1FRMHbits   = 0x49C;
 U1TOK        = 0x49E;
_U1TOK        = 0x49E;
_U1TOKbits    = 0x49E;
 U1SOF        = 0x4A0;
_U1SOF        = 0x4A0;
_U1SOFbits    = 0x4A0;
 U1CNFG1      = 0x4A6;
_U1CNFG1      = 0x4A6;
_U1CNFG1bits  = 0x4A6;
 U1CNFG2      = 0x4A8;
_U1CNFG2      = 0x4A8;
_U1CNFG2bits  = 0x4A8;
 U1EP0        = 0x4AA;
_U1EP0        = 0x4AA;
_U1EP0bits    = 0x4AA;
 U1EP1        = 0x4AC;
_U1EP1        = 0x4AC;
_U1EP1bits    = 0x4AC;
 U1EP2        = 0x4AE;
_U1EP2        = 0x4AE;
_U1EP2bits    = 0x4AE;
 U1EP3        = 0x4B0;
_U1EP3        = 0x4B0;
_U1EP3bits    = 0x4B0;
 U1EP4        = 0x4B2;
_U1EP4        = 0x4B2;
_U1EP4bits    = 0x4B2;
 U1EP5        = 0x4B4;
_U1EP5        = 0x4B4;
_U1EP5bits    = 0x4B4;
 U1EP6        = 0x4B6;
_U1EP6        = 0x4B6;
_U1EP6bits    = 0x4B6;
 U1EP7        = 0x4B8;
_U1EP7        = 0x4B8;
_U1EP7bits    = 0x4B8;
 U1EP8        = 0x4BA;
_U1EP8        = 0x4BA;
_U1EP8bits    = 0x4BA;
 U1EP9        = 0x4BC;
_U1EP9        = 0x4BC;
_U1EP9bits    = 0x4BC;
 U1EP10       = 0x4BE;
_U1EP10       = 0x4BE;
_U1EP10bits   = 0x4BE;
 U1EP11       = 0x4C0;
_U1EP11       = 0x4C0;
_U1EP11bits   = 0x4C0;
 U1EP12       = 0x4C2;
_U1EP12       = 0x4C2;
_U1EP12bits   = 0x4C2;
 U1EP13       = 0x4C4;
_U1EP13       = 0x4C4;
_U1EP13bits   = 0x4C4;
 U1EP14       = 0x4C6;
_U1EP14       = 0x4C6;
_U1EP14bits   = 0x4C6;
 U1EP15       = 0x4C8;
_U1EP15       = 0x4C8;
_U1EP15bits   = 0x4C8;
 U1PWMRRS     = 0x4CC;
_U1PWMRRS     = 0x4CC;
_U1PWMRRSbits = 0x4CC;
 U1PWMCON     = 0x4CE;
_U1PWMCON     = 0x4CE;
_U1PWMCONbits = 0x4CE;
 PMCON        = 0x600;
_PMCON        = 0x600;
_PMCONbits    = 0x600;
 PMMODE       = 0x602;
_PMMODE       = 0x602;
_PMMODEbits   = 0x602;
 PMADDR       = 0x604;
_PMADDR       = 0x604;
_PMADDRbits   = 0x604;
 PMDOUT1      = 0x604;
_PMDOUT1      = 0x604;
_PMDOUT1bits  = 0x604;
 PMDOUT2      = 0x606;
_PMDOUT2      = 0x606;
 PMDIN1       = 0x608;
_PMDIN1       = 0x608;
 PMDIN2       = 0x60A;
_PMDIN2       = 0x60A;
 PMAEN        = 0x60C;
_PMAEN        = 0x60C;
_PMAENbits    = 0x60C;
 PMSTAT       = 0x60E;
_PMSTAT       = 0x60E;
_PMSTATbits   = 0x60E;
 ALRMVAL      = 0x620;
_ALRMVAL      = 0x620;
 ALCFGRPT     = 0x622;
_ALCFGRPT     = 0x622;
_ALCFGRPTbits = 0x622;
 RTCVAL       = 0x624;
_RTCVAL       = 0x624;
 RCFGCAL      = 0x626;
_RCFGCAL      = 0x626;
_RCFGCALbits  = 0x626;
 CRCCON       = 0x640;
_CRCCON       = 0x640;
_CRCCONbits   = 0x640;
 CRCCON1      = 0x640;
_CRCCON1      = 0x640;
_CRCCON1bits  = 0x640;
 CRCCON2      = 0x642;
_CRCCON2      = 0x642;
_CRCCON2bits  = 0x642;
 CRCXOR       = 0x644;
_CRCXOR       = 0x644;
_CRCXORbits   = 0x644;
 CRCXORL      = 0x644;
_CRCXORL      = 0x644;
_CRCXORLbits  = 0x644;
 CRCXORH      = 0x646;
_CRCXORH      = 0x646;
_CRCXORHbits  = 0x646;
 CRCDAT       = 0x648;
_CRCDAT       = 0x648;
 CRCDATL      = 0x648;
_CRCDATL      = 0x648;
 CRCDATH      = 0x64A;
_CRCDATH      = 0x64A;
 CRCWDAT      = 0x64C;
_CRCWDAT      = 0x64C;
 CRCWDATL     = 0x64C;
_CRCWDATL     = 0x64C;
 CRCWDATH     = 0x64E;
_CRCWDATH     = 0x64E;
 CMSTAT       = 0x650;
_CMSTAT       = 0x650;
_CMSTATbits   = 0x650;
 CVRCON       = 0x652;
_CVRCON       = 0x652;
_CVRCONbits   = 0x652;
 CM1CON       = 0x654;
_CM1CON       = 0x654;
_CM1CONbits   = 0x654;
 CM2CON       = 0x65C;
_CM2CON       = 0x65C;
_CM2CONbits   = 0x65C;
 CM3CON       = 0x664;
_CM3CON       = 0x664;
_CM3CONbits   = 0x664;
 RPINR0       = 0x680;
_RPINR0       = 0x680;
_RPINR0bits   = 0x680;
 RPINR1       = 0x682;
_RPINR1       = 0x682;
_RPINR1bits   = 0x682;
 RPINR3       = 0x686;
_RPINR3       = 0x686;
_RPINR3bits   = 0x686;
 RPINR4       = 0x688;
_RPINR4       = 0x688;
_RPINR4bits   = 0x688;
 RPINR7       = 0x68E;
_RPINR7       = 0x68E;
_RPINR7bits   = 0x68E;
 RPINR8       = 0x690;
_RPINR8       = 0x690;
_RPINR8bits   = 0x690;
 RPINR9       = 0x692;
_RPINR9       = 0x692;
_RPINR9bits   = 0x692;
 RPINR11      = 0x696;
_RPINR11      = 0x696;
_RPINR11bits  = 0x696;
 RPINR18      = 0x6A4;
_RPINR18      = 0x6A4;
_RPINR18bits  = 0x6A4;
 RPINR19      = 0x6A6;
_RPINR19      = 0x6A6;
_RPINR19bits  = 0x6A6;
 RPINR20      = 0x6A8;
_RPINR20      = 0x6A8;
_RPINR20bits  = 0x6A8;
 RPINR21      = 0x6AA;
_RPINR21      = 0x6AA;
_RPINR21bits  = 0x6AA;
 RPINR22      = 0x6AC;
_RPINR22      = 0x6AC;
_RPINR22bits  = 0x6AC;
 RPINR23      = 0x6AE;
_RPINR23      = 0x6AE;
_RPINR23bits  = 0x6AE;
 RPOR0        = 0x6C0;
_RPOR0        = 0x6C0;
_RPOR0bits    = 0x6C0;
 RPOR1        = 0x6C2;
_RPOR1        = 0x6C2;
_RPOR1bits    = 0x6C2;
 RPOR2        = 0x6C4;
_RPOR2        = 0x6C4;
_RPOR2bits    = 0x6C4;
 RPOR3        = 0x6C6;
_RPOR3        = 0x6C6;
_RPOR3bits    = 0x6C6;
 RPOR4        = 0x6C8;
_RPOR4        = 0x6C8;
_RPOR4bits    = 0x6C8;
 RPOR5        = 0x6CA;
_RPOR5        = 0x6CA;
_RPOR5bits    = 0x6CA;
 RPOR6        = 0x6CC;
_RPOR6        = 0x6CC;
_RPOR6bits    = 0x6CC;
 RPOR7        = 0x6CE;
_RPOR7        = 0x6CE;
_RPOR7bits    = 0x6CE;
 RPOR8        = 0x6D0;
_RPOR8        = 0x6D0;
_RPOR8bits    = 0x6D0;
 RPOR9        = 0x6D2;
_RPOR9        = 0x6D2;
_RPOR9bits    = 0x6D2;
 RPOR10       = 0x6D4;
_RPOR10       = 0x6D4;
_RPOR10bits   = 0x6D4;
 RPOR11       = 0x6D6;
_RPOR11       = 0x6D6;
_RPOR11bits   = 0x6D6;
 RPOR12       = 0x6D8;
_RPOR12       = 0x6D8;
_RPOR12bits   = 0x6D8;
 RCON         = 0x740;
_RCON         = 0x740;
_RCONbits     = 0x740;
 OSCCON       = 0x742;
_OSCCON       = 0x742;
_OSCCONbits   = 0x742;
 OSCCONL      = 0x742;
_OSCCONL      = 0x742;
 OSCCONH      = 0x743;
_OSCCONH      = 0x743;
 CLKDIV       = 0x744;
_CLKDIV       = 0x744;
_CLKDIVbits   = 0x744;
 OSCTUN       = 0x748;
_OSCTUN       = 0x748;
_OSCTUNbits   = 0x748;
 REFOCON      = 0x74E;
_REFOCON      = 0x74E;
_REFOCONbits  = 0x74E;
 DSCON        = 0x758;
_DSCON        = 0x758;
_DSCONbits    = 0x758;
 DSWAKE       = 0x75A;
_DSWAKE       = 0x75A;
_DSWAKEbits   = 0x75A;
 DSGPR0       = 0x75C;
_DSGPR0       = 0x75C;
_DSGPR0bits   = 0x75C;
 DSGPR1       = 0x75E;
_DSGPR1       = 0x75E;
_DSGPR1bits   = 0x75E;
 NVMCON       = 0x760;
_NVMCON       = 0x760;
_NVMCONbits   = 0x760;
 NVMKEY       = 0x766;
_NVMKEY       = 0x766;
 PMD1         = 0x770;
_PMD1         = 0x770;
_PMD1bits     = 0x770;
 PMD2         = 0x772;
_PMD2         = 0x772;
_PMD2bits     = 0x772;
 PMD3         = 0x774;
_PMD3         = 0x774;
_PMD3bits     = 0x774;
 PMD4         = 0x776;
_PMD4         = 0x776;
_PMD4bits     = 0x776;
/*
** ======= Base Addresses for Various Peripherals ======
*/

 IC1          = 0x144;
_IC1          = 0x144;
 IC2          = 0x14C;
_IC2          = 0x14C;
 IC3          = 0x154;
_IC3          = 0x154;
 IC4          = 0x15C;
_IC4          = 0x15C;
 IC5          = 0x164;
_IC5          = 0x164;
 OC1          = 0x194;
_OC1          = 0x194;
 OC2          = 0x19E;
_OC2          = 0x19E;
 OC3          = 0x1A8;
_OC3          = 0x1A8;
 OC4          = 0x1B2;
_OC4          = 0x1B2;
 OC5          = 0x1BC;
_OC5          = 0x1BC;
 SPI1         = 0x240;
_SPI1         = 0x240;
 SPI2         = 0x260;
_SPI2         = 0x260;
 UART1        = 0x220;
_UART1        = 0x220;
 UART2        = 0x230;
_UART2        = 0x230;
